---
import "@fontsource/cabin"

import Header from "../components/Header.astro"
import Footer from "../components/Footer.astro"
import Middle from "../components/Middle.astro"

export interface Props {
    title?: string
    description?: string
    image?: string
}


// function handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {
//     entries.forEach(entry => {
//         if (entry.isIntersecting) {
//             console.log(`Element with ID ${entry.target.id} is in view`);
//             // Add your tracking or analytics code here
//         }
//     });
// }

// // Use Intersection Observer
// const observer = new IntersectionObserver(handleIntersection);

// // Get elements to track (replace with your selector)
// const elementsToTrack = document.querySelectorAll('.track-element');

// // Observe each element
// elementsToTrack.forEach(element => {
//     observer.observe(element);
// });


const {
    title = "Melbourne Recital Centre proposal",
    description = "A proposal by the Interaction Consortium",
    image = "/logos/ic_sm.png",
} = Astro.props


// // Define a function to handle intersection changes
// function handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {
//     entries.forEach(entry => {
//         if (entry.isIntersecting) {
//             console.log(`Element with ID ${entry.target.id} is in view`);
//             // Add your tracking or analytics code here
//         }
//     });
// }

// // Check if IntersectionObserver is available before using it
// if (typeof IntersectionObserver !== 'undefined') {
//     // Use Intersection Observer
//     const observer = new IntersectionObserver(handleIntersection);

//     // Get elements to track (replace with your selector)
//     const elementsToTrack = document.querySelectorAll('.track-element');

//     // Observe each element
//     elementsToTrack.forEach(element => {
//         observer.observe(element);
//     });

//     // Cleanup: Disconnect the observer when not needed
//     // For example, in an Astro unmount hook or when the component is no longer needed
//     // observer.disconnect();
// } else {
//     console.warn('IntersectionObserver is not supported in this environment.');
// }
---

<!DOCTYPE html>
<html lang="en" class="min-h-screen">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/png" href="/heartbeat.png" />
        <link rel="sitemap" href="/sitemap-index.xml" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
        <meta name="theme-color" content="#134e4a" />
        <link rel="canonical" href={Astro.url} />
        <title>{title}</title>
        <meta property="og:type" content="website" />
        <meta property="og:url" content={Astro.url} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={image} />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:url" content={Astro.url} />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:description" content={description} />
        <meta property="twitter:image" content={image} />
    </head>

    <body class="min-h-screen flex flex-col">
        <Header title={title} logo={image}/>
        <slot />
        <Footer />
    </body>
</html>
