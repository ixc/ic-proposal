---
// import { getEntry } from "astro:content"
import Aside from "../components/Aside.astro";
import Layout from "./Layout.astro";

// const { slug } = Astro.params;

// const section = await getEntry('sections', String(slug));

// if (section){
//     const {Content, headings} = await section.render()
// }
---

<script>

    let tracker;
    let lastScrollPosition = window.scrollY;

    function handleIntersection(entries: IntersectionObserverEntry[]) {
        // find scroll direction
        const currentScrollPosition = window.scrollY;
        let scrollDirection
        // Compare current and previous scroll positions
        if (currentScrollPosition > lastScrollPosition) {
            scrollDirection = 'down';
        } else if (currentScrollPosition < lastScrollPosition) {
            scrollDirection = 'up';
        }
        lastScrollPosition = currentScrollPosition;

        // find intersecting headers
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                tracker[entry.target.id].intersecting = true;
            } else {
                tracker[entry.target.id].intersecting = false;
            }
        })

        // get the intersecting header ids
        const intersecting = orderedIDs.filter(item => tracker[item].intersecting)

        // 
        if (intersecting.length == 1){
            // if only one intersecting then set that as active
            orderedIDs.forEach(item => {
                if (item == intersecting[0]){
                    tracker[item].active=true
                } else {
                    tracker[item].active=false
                }
            })
        } else if ( intersecting.length > 1 ){
            let setActive=false;
            orderedIDs.forEach(item => {
                if (tracker[item].intersecting && !setActive){
                    tracker[item].active=true
                    setActive=true
                } else {
                    tracker[item].active=false
                }
            })
        } else {
            if ( scrollDirection === 'up' ){
                // if no intersects and scrolling up then find the active id and switch it to the one above
                let activateNext=false;
                orderedIDs.reverse().forEach(item => {
                    if (tracker[item].active){
                        tracker[item].active=false
                        activateNext=true
                    } else if (activateNext) {
                        tracker[item].active=true
                        activateNext=false
                    } else {
                        tracker[item].active=false
                    }
                })
            }
        }

        // assign or remove the arrow from the aside
        orderedIDs.forEach(item => {
            const asideArrow = document.getElementById(`aside-arrow-${item}`)
            if ( asideArrow ){
                if (tracker[item].active){
                    asideArrow.innerHTML = ">";
                } else {
                    asideArrow.innerHTML = "";
                }
            }
        })
    }

    // Now IntersectionObserver is available, proceed with your code
    const observer = new IntersectionObserver(handleIntersection);
    // Get elements to track (replace with your selector)
    var elementsToTrack = Array.from(document.querySelectorAll('h2, h3')).filter(ele => ele.id);
    // order of headings
    const orderedIDs = Array.from(elementsToTrack).map(ele => ele.id);
    tracker = orderedIDs.reduce((acc, ele) => {
        acc[ele] = { intersecting: false, active: false };
        return acc;
    }, {});

    // Observe each element
    elementsToTrack.forEach(element => {
        observer.observe(element);
    });

</script>

<Layout>
    <div class="flex">
        <div class="w-1/4 pl-12 pt-8 border-r border-gray-300 h-screen sticky top-0">
            <Aside />
        </div>
        <div class="prose prose-2xl pl-12 pt-8 flex-1">
            <slot />
        </div>
    </div>
</Layout>