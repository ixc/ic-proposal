---
import type {CollectionEntry} from "astro:content"
import {getCollection} from "astro:content"

type Props = {
    section: CollectionEntry<"sections">
}

const {section} = Astro.props
var {headings} = await section.render()

// if 
if (section.data.relatedCollection) {
    const related = await getCollection(section.data.relatedCollection);
    related.sort((a, b) => a.data.page - b.data.page);

    for (const entry of related) {
        // Await the render function of each entry
        const { headings: relatedHeadings } = await entry.render();
        // Process the headings
        headings = [...headings, ...relatedHeadings]
    }
}

// Define interface for headings
interface Heading {
    depth: number;
    slug: string;
    text: string;
}

// Assuming headings is an array of Heading objects
const obj: Record<string, { parent: Heading; children: Heading[] }> = {};
let mainHeader: string | undefined;

headings.forEach((header: Heading) => {
    if (header.depth === 2) {
        obj[header.slug] = { parent: header, children: [] };
        mainHeader = header.slug;
    } else if (header.depth === 3 && mainHeader) {
        if (obj[mainHeader]) {
            obj[mainHeader].children.push(header);
        }
    }
});
---

<li class="flex flex-col mb-3">
    <ul>
        {Object.keys(obj).map(keyHeader => {
            return (
                <li id={`aside-${keyHeader}`} class="header-group">
                    <a href={`/sections/${section.slug}`}>
                        <span id={`aside-arrow-${keyHeader}`} class="arrow"></span>
                        <span class="header">{obj[keyHeader].parent.text}</span>
                    </a>
                    <ul>
                        {obj[keyHeader].children.map(minorHeader => {
                            const id = `${keyHeader}-${minorHeader.slug}`;
                            return (
                                <li id={`aside-${id}`} class="header-sub-group ml-4">
                                    <a href={`/sections/${section.slug}/#${minorHeader.slug}`}>
                                        <span id={`aside-arrow-${id}`} class="arrow absolute"></span>
                                        <span class="header ml-4">{minorHeader.text}</span>
                                    </a>
                                </li>
                            )
                        })}
                    </ul>
                </li>
            )
        })}
    </ul>
</li>